package br.ufes.inf.lprm.scene.examples.aedes;

import java.util.List;

import br.ufes.inf.lprm.scene.model.impl.Situation;
import br.ufes.inf.lprm.scene.util.SituationHelper;
import br.ufes.inf.lprm.situation.annotations.part;
import br.ufes.inf.lprm.situation.model.events.*;
import ca.study.scenary.entities.*;

declare houseAptLay extends Situation
	house: House @part
end

declare MosquitoNotMoved extends Situation
	house: House @part
	mosquito: Mosquito @part
end

declare MosquitoNotLayed extends Situation
	house: House @part
	mosquito: Mosquito @part
end

declare lifeEggs extends Situation
	house: House @part
	eggs: Eggs @part
end

declare trapEggs extends Situation
	house: House @part
	eggs: Eggs @part
end

rule "lifeEggs"
@role(situation)
@type(lifeEggs)
    when
        house: House(activefocus==true)
        eggs: Eggs() from house.getEggs()
        Eggs() over window:time(20d)
    then
    SituationHelper.situationDetected(drools);
end
//Faz o casamento da situação quando a casa possui ovos que estão nascendo em focos (menos de 20 dias) - para posteriormente darem origem a mosquitos

rule "trapEggs"
@role(situation)
@type(trapEggs)
    when
        house: House(trap==true)
        eggs: Eggs() from house.getEggs()
        Eggs() over window:time(4d)
    then
    SituationHelper.situationDetected(drools);
end
//Faz o casamento da situação quando a casa possui ovos que estão nascendo em armadilhas (menos de 4 dias) - para posteriormente chamar o agente


rule "houseAptLayFocus"
@role(situation)
@type(houseAptLay)
    when
    	    house: House(activefocus==true)
    then
        SituationHelper.situationDetected(drools);
end
//faz o casamento da situação quando o mosquito pode fazer a oviposição na casa (com foco)

rule "houseAptLayTrap"
@role(situation)
@type(houseAptLay)
    when
    	    house: House(trap==true)
    then
        SituationHelper.situationDetected(drools);
end
//faz o casamento da situação quando o mosquito pode fazer a oviposição na casa (com armadilha)

rule "MosquitoNotMoved"
@role(situation)
@type(MosquitoNotMoved)
    when
     house: House()
    	    mosquito: Mosquito(controlfly==false) from house.getMosquitos()
    then
        SituationHelper.situationDetected(drools);
end
//faz o casamento da situaço quando o mosquito ainda não voou

rule "MosquitoNotLayed"
@role(situation)
@type(MosquitoNotLayed)
    when
     	house: House()
        mosquito: Mosquito(controleggs==false) from house.getMosquitos()
    then
        SituationHelper.situationDetected(drools);
end
//faz o casamento da situaço quando o mosquito ainda não botou

rule "moving"
	when
		Scenary( $houses: scenary )
		$sit: MosquitoNotMoved($house:house,$mosquito:mosquito)//se há a situaço do mosquito voar
	then
		$house.changeMosquito($mosquito); //o mosquito voa
		//System.out.println("Mosquito has moved");
		update($house)
		//update($mosquito)
end
//regra para o mosquito que está voando

rule "laying eggs"
	when
		$sit1: MosquitoNotLayed($house:house,$mosquito: mosquito)//se o mosquito não botou
		$sit2: houseAptLay(house == $house)// e está numa casa apta a botar
	then
		$mosquito.setControleggs(true);
        $house.addEggs();//mosquito bota
		//System.out.println("Mosquito has layed eggs");
		update($house)
		//update($mosquito)
end
//regra para o mosquito que está botando


rule "hatching eggs"
	when
		$house: House()
		$eggs: Eggs() from $house.getEggs()
		$sit: lifeEggs(eggs == $eggs, active==false)//se a situaço dos ovos nascendo desativar (após os 20 dias)
	then
		$house.addMosquito();//conjunto de ovos viram 10 mosquitos.
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
		$house.addMosquito();
        $house.removeEggs($eggs);
		System.out.println("Eggs are hatched");
end
//regra que verifica os ovos eclodindo


rule "calling agent"
when
		$house: House()
		$eggs: Eggs() from $house.getEggs()
		$sit: trapEggs(eggs == $eggs, active==false)//se a situação dos ovos na armadilha desativar (após os 4 dias)
	then
		$house.callAgent();//agente faz o trabalho (de remoção de ovos, focos e mosquitos)
		System.out.println("Agent Called");
end
//regra que chama o agente
