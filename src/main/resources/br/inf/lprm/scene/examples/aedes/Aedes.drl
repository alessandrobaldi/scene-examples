package br.ufes.inf.lprm.scene.examples.aedes;

/*import br.ufes.inf.lprm.scene.base.*;
import br.ufes.inf.lprm.scene.examples.shared.*;*/
//import br.ufes.inf.lprm.scene.model.impl.Situation;

import java.lang.Math;

import java.util.List;

import br.ufes.inf.lprm.scene.model.impl.Situation;
import br.ufes.inf.lprm.scene.util.SituationHelper;
import br.ufes.inf.lprm.situation.annotations.part;
import br.ufes.inf.lprm.situation.model.events.*;

//global java.util.List list;


/*Mosquito Apto a Voar

CondiÃ§Ã£o de ativaÃ§Ã£o: Mosquito nÃ£o deve ter voado durante o dia. Desativa: ApÃ³s mosquito voar.
Mosquito Apto a botar
CondiÃ§Ã£o de ativaÃ§Ã£o: ApÃ³s desativaÃ§Ã£o do â€œapto a voarâ€�. Desativa: ApÃ³s mosquito botar.
Ovos chocando
CondiÃ§Ã£o de ativaÃ§Ã£o: ApÃ³s desativaÃ§Ã£o do â€œapto a botarâ€� Desativa: apÃ³s 20 dias ou atÃ© agente combater.
Mosquito nasce
CondiÃ§Ã£o de ativaÃ§Ã£o: ApÃ³s desativaÃ§Ã£o do â€œovos chocandoâ€� Desativa: ApÃ³s mosquito nascer.

Agente sendo chamado
CondiÃ§Ã£o de ativaÃ§Ã£o: Com a condiÃ§Ã£o â€œovos chocandoâ€� Desativa: ApÃ³s 3 dias.
Agente atuando
CondiÃ§Ã£o de ativaÃ§Ã£o: Com a desativaÃ§Ã£o de â€œagente sendo chamadoâ€� Desativa: ApÃ³s combater 5 casas aleatoriamente.
Chovendo
CondiÃ§Ã£o de ativaÃ§Ã£o: 15 dias apÃ³s Ãºltima execuÃ§Ã£o / inÃ­cio da simulaÃ§Ã£o Desativa: ApÃ³s chover*/


declare AedesSituation extends Situation
	mosquito: Sensor @part
	house: House @part
	person: Person @part
    transactions: List @part
    /*Entre outros, definir como @part todos os envolvidos na analise de situações*/
end

@role(situation)
@type(AedesSituation)
rule "test mosquito"
    when
	    Mosquito() over window:time(10s)
    then
    	System.out.println("Deu certo");
    	SituationHelper.situationDetected(drools);
end

/*
 Esse exemplo ficou meio feio, mas a ideia é mais ou menos essa!
 Vamos modificar a estrutura de dados e melhorar isso. :-)
*/
rule "Ocorrerou a presença de 3 mosquitos em um intervalo de 2 minutos"
@role(situation)
@type(AedesSituation)
    when
       house : House();
       transactions: MoquistoList(size >= 3) from accumulate(
          transaction: House(houseId == house.houseId) over window:time (2m),
          collectList(transaction)
       )
     then
       SituationHelper.situationDetected(drools);
end 
    
